name: Build and Release Definition Plugin

on:
  push:
    tags:
      - 'v*'

# Permissions for GITHUB_TOKEN (principle of least privilege)
permissions:
  contents: write  # Needed for creating releases
  issues: read
  pull-requests: read

# Add restrictions for parallel runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "IS_TAG=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(date +'%Y.%m.%d')-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
            echo "IS_TAG=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update plugin.json version
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $pluginJsonPath = "Definition/Community.PowerToys.Run.Plugin.Definition/plugin.json"
          
          if (Test-Path $pluginJsonPath) {
            $content = Get-Content $pluginJsonPath -Raw | ConvertFrom-Json
            $content.Version = $version
            $content | ConvertTo-Json -Depth 10 | Set-Content $pluginJsonPath -Encoding UTF8
            Write-Host "Updated plugin.json version to: $version"
          }
        shell: pwsh
      
      - name: Build
        run: dotnet build Definition/Definition.sln -c Release -p:Platform="${{ matrix.platform }}"
      
      - name: Create output directory
        run: mkdir -p artifacts
      
      - name: Copy build output to artifacts directory
        run: |
          $artifactDir = "artifacts/Definition-${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}"
          
          New-Item -ItemType Directory -Force -Path $artifactDir
          New-Item -ItemType Directory -Force -Path "$artifactDir/Definition"
          
          # Copy Images folder (icons) to artifact directory to ensure correct icons in release
          $imagesSrc = "Definition/Community.PowerToys.Run.Plugin.Definition/Images"
          $imagesDst = "$artifactDir/Definition/Images"
          if (Test-Path $imagesSrc) {
            Write-Host "Copying Images folder from $imagesSrc to $imagesDst"
            Copy-Item -Path $imagesSrc -Destination $imagesDst -Recurse -Force
          } else {
            Write-Host "Images folder not found at $imagesSrc"
          }
          
          # Define the direct path to the build output
          $buildOutput = "Definition/Community.PowerToys.Run.Plugin.Definition/bin/${{ matrix.platform }}/Release"
          
          Write-Host "Using build output directory: $buildOutput"
          
          # Check if the directory exists
          if (-not (Test-Path $buildOutput)) {
            Write-Host "Build output directory not found at expected path. Searching for it..."
            $buildOutput = Get-ChildItem -Path "Definition" -Recurse -Directory | 
                           Where-Object { $_.Name -eq "Release" -and $_.FullName -like "*${{ matrix.platform }}*" } | 
                           Select-Object -First 1 -ExpandProperty FullName
            
            if ($buildOutput) {
              Write-Host "Found build output directory: $buildOutput"
            } else {
              Write-Error "Could not find any Release directory for platform ${{ matrix.platform }}"
              exit 1
            }
          }
          
          # Check if build output exists before proceeding
          if (-not (Test-Path $buildOutput)) {
            Write-Error "Build output directory not found"
            exit 1
          }
          
          # Check for files directly in the build output directory
          $files = Get-ChildItem -Path $buildOutput -File
          if ($files.Count -gt 0) {
            Write-Host "Found $($files.Count) files in build output directory. Copying directly..."
            Get-ChildItem -Path $buildOutput -File | ForEach-Object {
              Copy-Item -Path $_.FullName -Destination "$artifactDir/Definition" -Force
            }
            Write-Host "Files copied successfully"
          } else {
            # Look for a .NET runtime folder
            $runtimeFolder = Get-ChildItem -Path $buildOutput -Directory | 
                             Where-Object { $_.Name -like "net*-windows*" } | 
                             Select-Object -First 1 -ExpandProperty FullName
            
            if ($runtimeFolder) {
              Write-Host "Found runtime folder: $runtimeFolder"
              Copy-Item -Path "$runtimeFolder\*" -Destination "$artifactDir/Definition" -Recurse -Force
              Write-Host "Files copied successfully from runtime folder"
            } else {
              # If no runtime folder, check for any subdirectories
              $subDirs = Get-ChildItem -Path $buildOutput -Directory
              if ($subDirs.Count -gt 0) {
                $firstSubDir = $subDirs[0].FullName
                Write-Host "No runtime folder found, but found subdirectory: $firstSubDir"
                Copy-Item -Path "$firstSubDir\*" -Destination "$artifactDir/Definition" -Recurse -Force
                Write-Host "Files copied from first subdirectory"
              } else {
                Write-Error "No files or subdirectories found in build output directory"
                exit 1
              }
            }
          }
        shell: pwsh
      
      - name: Remove unnecessary PowerToys DLLs
        run: |
          $artifactDir = "artifacts/Definition-${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}"
          
          # Remove unnecessary PowerToys DLLs that are provided by the host
          $unnecessaryDlls = @(
            "PowerToys.Common.UI.dll",
            "PowerToys.ManagedCommon.dll", 
            "PowerToys.Settings.UI.Lib.dll",
            "Wox.Infrastructure.dll",
            "Wox.Plugin.dll"
          )
          
          foreach ($dll in $unnecessaryDlls) {
            $dlls = Get-ChildItem -Path "$artifactDir/Definition" -Recurse -Filter $dll
            foreach ($item in $dlls) {
              Write-Host "Removing unnecessary DLL: $($item.FullName)"
              Remove-Item $item.FullName -Force
            }
          }
        shell: pwsh
      
      - name: Create ZIP archive
        run: |
          $artifactDir = "artifacts/Definition-${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}"
          
          # Create the zip files with proper naming convention: <name>-<version>-<platform>.zip
          if ("${{ matrix.platform }}" -eq "x64") {
            $zipFile = "Definition-${{ steps.get_version.outputs.VERSION }}-x64.zip"
          } else {
            $zipFile = "Definition-${{ steps.get_version.outputs.VERSION }}-ARM64.zip"
          }
          
          # Create the zip file
          Compress-Archive -Path "$artifactDir/Definition" -DestinationPath "artifacts/$zipFile"
        shell: pwsh
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.platform }}
          path: artifacts/*.zip
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts
      
      # Debug step to see what files are available
      - name: List downloaded artifacts
        run: |
          echo "Listing downloaded artifacts directory:"
          ls -la downloaded-artifacts
          echo "Listing x64 artifacts:"
          ls -la downloaded-artifacts/build-artifacts-x64 || echo "No x64 artifacts found"
          echo "Listing ARM64 artifacts:"
          ls -la downloaded-artifacts/build-artifacts-arm64 || echo "No ARM64 artifacts found"
      
      # Copy artifacts to the expected location with the correct names
      - name: Prepare artifacts for release
        run: |
          mkdir -p release-artifacts
          echo "Listing all downloaded artifacts:"
          find downloaded-artifacts -type f
          echo "Copying ZIP files to release-artifacts:"
          cp downloaded-artifacts/build-artifacts-x64/*.zip release-artifacts/ || echo "Failed to copy x64 artifact"
          cp downloaded-artifacts/build-artifacts-arm64/*.zip release-artifacts/ || echo "Failed to copy ARM64 artifact"
          echo "Listing release artifacts:"
          ls -la release-artifacts
      
      - name: Generate SHA256 checksums
        run: |
          cd release-artifacts
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          echo "Files in release-artifacts:"
          ls -la
          echo "Generating checksums for all ZIP files:"
          for zipfile in *.zip; do
            if [ -f "$zipfile" ]; then
              echo "Processing $zipfile"
              sha256sum "$zipfile" | tr 'a-f' 'A-F' > "${zipfile}.sha256"
            fi
          done
          
          # Create combined checksums.txt file
          echo "SHA256 Checksums for Definition Plugin v${VERSION}" > checksums.txt
          echo "Generated on: $(date -u)" >> checksums.txt
          echo "" >> checksums.txt
          cat *.zip.sha256 >> checksums.txt
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Prepare Release Notes
        id: release_notes
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          cat > release_notes.md << EOL
          # 🔍 Definition Plugin v${VERSION}
          <p align="center">
            <img src="https://raw.githubusercontent.com/ruslanlap/PowerToysRun-Definition/refs/heads/master/data/definition.logo.png" width="128px" alt="Definition Plugin Logo" />
          </p>
          <p align="center">
            <img src="https://github.com/ruslanlap/PowerToysRun-Definition/blob/master/data/demo-definition-3.gif?raw=true" alt="Definition Plugin Demo" width="800">
          </p>
          <p align="center">
            A powerful plugin for PowerToys Run to get word definitions, pronunciations, and synonyms with ease.
          </p>

          ## ✨ What's New
          - 🚀 Performance improvements: Faster lookups and reduced memory usage.
          - 🐛 Bug fixes: Fixed issues with audio pronunciation and improved error handling.
          - ✨ New features: Enhanced theme support and better caching mechanisms.
          - 🔧 PTRUN Compliance: All PowerToys Run linting issues resolved (PTRUN1301, PTRUN1303, PTRUN1401, PTRUN1402).

          ## 📥 Installation
          ### Prerequisites
          - PowerToys installed on your system.
          - .NET runtime (if applicable).

          ### Steps
          1. Download the ZIP file for your platform (x64 or ARM64).
          2. Extract the contents to \`%LOCALAPPDATA%\\Microsoft\\PowerToys\\PowerToys Run\\Plugins\\\`.
          3. Restart PowerToys.
          4. Start using with \`Alt+Space\` then type \`def <word>\`.

          ### Troubleshooting
          - If the plugin does not appear, ensure that the files are extracted to the correct directory.
          - Make sure PowerToys is up to date.

          ## 🔍 Quick Commands
          | Command                     | Description                         |
          |-----------------------------|-------------------------------------|
          | \`def <word>\`                | Get definition of a word            |
          | \`def pronunciation <word>\`  | Get pronunciation audio             |
          | \`def synonyms <word>\`       | Show synonyms and antonyms          |
          | \`def help\`                  | Display help information            |

          ## 🙏 Thank You
          Thank you for using Definition Plugin! Your feedback and contributions are greatly appreciated.

          If you encounter any issues or have suggestions, please [open an issue](https://github.com/ruslanlap/PowerToysRun-Definition/issues).

          Made with ❤️ by <a href="https://github.com/ruslanlap">ruslanlap</a>

          Special thanks to all contributors and the PowerToys community for their support.
          EOL
          
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Definition Plugin v${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: |
            release-artifacts/*.zip
            release-artifacts/*.zip.sha256
            release-artifacts/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
